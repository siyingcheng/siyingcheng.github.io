import{_ as e,c as t,o,a4 as l}from"./chunks/framework.Ho0cDKEI.js";const m=JSON.parse('{"title":"Xpath","description":"","frontmatter":{},"headers":[],"relativePath":"queries/selenium/xpath.md","filePath":"queries/selenium/xpath.md","lastUpdated":1723114068000}'),i={name:"queries/selenium/xpath.md"},a=l('<h1 id="xpath" tabindex="-1">Xpath <a class="header-anchor" href="#xpath" aria-label="Permalink to &quot;Xpath&quot;">​</a></h1><h2 id="basic-xpath-syntax" tabindex="-1">Basic XPath Syntax <a class="header-anchor" href="#basic-xpath-syntax" aria-label="Permalink to &quot;Basic XPath Syntax&quot;">​</a></h2><ul><li><code>/</code> : Selects from the root element</li><li><code>//</code> : Selects nodes anywhere in the document</li><li><code>.</code> : Represents the current node</li><li><code>..</code> : Represents the parent of the current node</li></ul><h2 id="selectors" tabindex="-1">Selectors <a class="header-anchor" href="#selectors" aria-label="Permalink to &quot;Selectors&quot;">​</a></h2><ol><li><code>tagname</code> : Selects all elements with the given tag name</li><li><code>@attribute</code> : Selects elements with the given attribute</li><li><code>*</code> : Selects all elements</li><li><code>text()</code> : Selects the text content of an element</li><li><code>|</code> : Selects elements that match either of the two expressions</li><li><code>[predicate]</code> : Adds a condition to filter nodes</li><li><code>()</code> : Groups expressions</li></ol><h2 id="predicates" tabindex="-1">Predicates <a class="header-anchor" href="#predicates" aria-label="Permalink to &quot;Predicates&quot;">​</a></h2><ul><li><code>[name=&#39;value&#39;]</code> - Selects nodes with the specified attribute value.</li><li><code>[position()]</code> - Selects nodes based on their position.</li><li><code>[last()]</code> - Selects the last node of a given type.</li><li><code>[contains(@attribute, &#39;value&#39;)]</code> - Selects nodes with attribute values containing &#39;value&#39;.</li><li><code>[not(predicate)]</code> - Negates a condition.</li></ul><h2 id="axes" tabindex="-1">Axes <a class="header-anchor" href="#axes" aria-label="Permalink to &quot;Axes&quot;">​</a></h2><ul><li><code>ancestor::</code> - Selects all ancestors.</li><li><code>ancestor-or-self::</code> - Selects ancestors and the current node.</li><li><code>child::</code> - Selects all children.</li><li><code>descendant::</code> - Selects all descendants.</li><li><code>descendant-or-self::</code> - Selects descendants and the current node.</li><li><code>following::</code> - Selects all following nodes.</li><li><code>following-sibling::</code> - Selects following siblings.</li><li><code>parent::</code> - Selects the parent node.</li><li><code>preceding::</code> - Selects all preceding nodes.</li><li><code>preceding-sibling::</code>- Selects preceding siblings.</li><li><code>self::</code> - Selects the current node.</li></ul><h2 id="operators" tabindex="-1">Operators <a class="header-anchor" href="#operators" aria-label="Permalink to &quot;Operators&quot;">​</a></h2><ul><li><code>=</code> - Equal to.</li><li><code>!=</code> - Not equal to.</li><li><code>&lt;</code> - Less than.</li><li><code>&lt;=</code> - Less than or equal to.</li><li><code>&gt;</code> - Greater than.</li><li><code>&gt;=</code> - Greater than or equal to.</li><li><code>and</code> - Logical AND.</li><li><code>or</code> - Logical OR.</li><li><code>not</code> - Logical NOT.</li></ul><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><ul><li><code>name()</code> - Returns the name of the current node.</li><li><code>count(nodes)</code> - Returns the number of nodes in the node-set.</li><li><code>concat(string1, string2)</code> - Concatenates two strings.</li><li><code>contains(string, substr)</code> - Checks if a string contains a substring.</li><li><code>substring(string, start, length)</code> - Returns a substring.</li><li><code>normalize-space(string)</code> - Removes leading/trailing whitespace and collapses spaces.</li></ul>',13),c=[a];function s(n,d,r,h,u,p){return o(),t("div",null,c)}const f=e(i,[["render",s]]);export{m as __pageData,f as default};
