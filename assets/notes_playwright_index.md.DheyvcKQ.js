import{_ as o,D as l,c as s,l as i,a as t,I as a,a4 as r,o as n}from"./chunks/framework.BDCwVL0w.js";const v=JSON.parse('{"title":"Playwright","titleTemplate":"Notes","description":"Notes for Playwright","frontmatter":{"title":"Playwright","titleTemplate":"Notes","description":"Notes for Playwright","head":[["meta",{"name":"description","content":"Notes for Playwright"}]],"tags":["Playwright"],"categories":["Notes"]},"headers":[],"relativePath":"notes/playwright/index.md","filePath":"notes/playwright/index.md","lastUpdated":1713276969000}'),p={name:"notes/playwright/index.md"},g={id:"playwright",tabindex:"-1"},h=i("a",{class:"header-anchor",href:"#playwright","aria-label":'Permalink to "Playwright <Badge type="tip" text="Playwright" /><Badge type="warning" text="Notes" />"'},"​",-1),d=r('<h2 id="what-is-playwright" tabindex="-1">What is Playwright? <a class="header-anchor" href="#what-is-playwright" aria-label="Permalink to &quot;What is Playwright?&quot;">​</a></h2><p>Playwright is an open-source automation testing tool which is used to test end to end modern web and mobile applications in both headed and headless modes.</p><h2 id="why-playwright" tabindex="-1">Why Playwright? <a class="header-anchor" href="#why-playwright" aria-label="Permalink to &quot;Why Playwright?&quot;">​</a></h2><p><strong>Any browser • Any platform • One API:</strong></p><ul><li><strong>Cross-platform</strong>: Test on Windows, Linux, and macOS, locally or on CI, headless or headed.</li><li><strong>Multiple languages</strong>: Use the Playwright API in TypeScript, JavaScript, Python, .NET, Java.</li><li><strong>Multiple browsers</strong>: Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox.</li><li><strong>Headless and headed modes</strong>: Playwright supports both headless and headed modes.</li><li><strong>Test Mobile Web</strong>： Native mobile emulation of Google Chrome for Android and Mobile Safari. The same rendering engine works on your Desktop and in the Cloud.</li></ul><p><strong>Resilient • No flaky tests:</strong></p><ul><li><strong>Auto-wait.</strong> Playwright waits for elements to be actionable prior to performing actions. It also has a rich set of introspection events. The combination of the two eliminates the need for artificial timeouts - the primary cause of flaky tests.</li><li><strong>Web-first assertions.</strong> Playwright assertions are created specifically for the dynamic web. Checks are automatically retried until the necessary conditions are met.</li><li><strong>Tracing.</strong> Configure test retry strategy, capture execution trace, videos, screenshots to eliminate flakes.</li></ul><p><strong>No trade-offs • No limits:</strong></p><ul><li>Multiple everything.</li><li>Trusted events.</li><li>Test frames, pierce Shadow DOM</li></ul><p><strong>Full isolation • Fast execution:</strong></p><ul><li>Browser contexts.</li><li>Log in once.</li></ul><p><strong>Powerful Tooling:</strong></p><ul><li><a href="https://playwright.dev/docs/codegen" target="_blank" rel="noreferrer">Codegen</a></li><li><a href="https://playwright.dev/docs/inspector" target="_blank" rel="noreferrer">Playwright Inspector</a></li><li><a href="https://playwright.dev/docs/trace-viewer" target="_blank" rel="noreferrer">Playwright Trace Viewer</a></li></ul><p><strong>Advantages:</strong></p><ul><li>Cross platform testing</li><li>Multiple browsers testing</li><li>Multiple languages support</li><li>Headless and headed modes</li><li>Auto wait</li><li>Tracing</li><li>Reporting</li><li>Dynamic wait assertions</li><li>Faster &amp; Reliable</li><li>Screenshots, video recoder</li><li>Powerful tooling - Codegen, Playwright Inspector, Trace viewer</li></ul><p><strong>Disadvantages:</strong></p><ul><li>Limited support for mobile testing</li><li>Limited support for testing of native applications</li><li>Limited support for testing of server-side applications</li><li>Limited support for testing of single-page applications</li></ul><h2 id="playwright-installation" tabindex="-1">Playwright Installation <a class="header-anchor" href="#playwright-installation" aria-label="Permalink to &quot;Playwright Installation&quot;">​</a></h2><p>To install Playwright, you need to have Node.js installed on your system. Once Node.js is installed, you can install Playwright using the following command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> playwright</span></span></code></pre></div><p><a href="https://playwright.dev/docs/intro" target="_blank" rel="noreferrer"><em>Here</em></a> is the official documentation for Playwright.</p><h2 id="locators" tabindex="-1">Locators <a class="header-anchor" href="#locators" aria-label="Permalink to &quot;Locators&quot;">​</a></h2><p>// Select an element by its id await page.waitForSelector(&#39;#myId&#39;); const elementById = await page.querySelector(&#39;#myId&#39;);</p><p>// Select an element by its class name await page.waitForSelector(&#39;.myClass&#39;); const elementByClassName = await page.querySelector(&#39;.myClass&#39;);</p><p>// Select an element by a CSS selector await page.waitForSelector(&#39;div.myClass&#39;); const elementBySelector = await page.querySelector(&#39;div.myClass&#39;);</p><p>// Select an element by its text content await page.waitForSelector(&#39;div:contains(&quot;My Text&quot;)&#39;); const elementByText = await page.querySelector(&#39;div:contains(&quot;My Text&quot;)&#39;);</p><p>// Select an element by its XPath expression await page.waitForXPath(&#39;//div[@class=&quot;myClass&quot;]&#39;); const elementByXPath = await page.querySelectorXPath(&#39;//div[@class=&quot;myClass&quot;]&#39;);</p><p>// Select an element by its tag name await page.waitForSelector(&#39;div&#39;); const elementByTagName = await page.querySelector(&#39;div&#39;);</p><p>// Select an element by its name attribute await page.waitForSelector(&#39;[name=&quot;myName&quot;]&#39;); const elementByName = await page.querySelector(&#39;[name=&quot;myName&quot;]&#39;);</p>',29);function c(y,m,u,w,f,b){const e=l("Badge");return n(),s("div",null,[i("h1",g,[t("Playwright "),a(e,{type:"tip",text:"Playwright"}),a(e,{type:"warning",text:"Notes"}),t(),h]),d])}const _=o(p,[["render",c]]);export{v as __pageData,_ as default};
