import{_ as n,D as t,c as l,l as e,a as i,I as a,a4 as h,o as p}from"./chunks/framework.BDCwVL0w.js";const f=JSON.parse('{"title":"Test Practices","titleTemplate":"Selenium","description":"Selenium Test Practices","frontmatter":{"title":"Test Practices","titleTemplate":"Selenium","description":"Selenium Test Practices","head":[["meta",{"name":"description","content":"Selenium Test Practices"}]],"tags":["Selenium"],"categories":["Notes"]},"headers":[],"relativePath":"notes/selenium/Test_Practices.md","filePath":"notes/selenium/Test_Practices.md","lastUpdated":1713276969000}'),r={name:"notes/selenium/Test_Practices.md"},k={id:"test-practices",tabindex:"-1"},o=e("a",{class:"header-anchor",href:"#test-practices","aria-label":'Permalink to "Test Practices <Badge type="tip" text="Selenium" /><Badge type="warning" text="Notes" />"'},"‚Äã",-1),d=h(`<h2 id="design-strategies" tabindex="-1">Design Strategies <a class="header-anchor" href="#design-strategies" aria-label="Permalink to &quot;Design Strategies&quot;">‚Äã</a></h2><div class="tip custom-block"><p class="custom-block-title">üìé</p><p>Here is the <a href="https://www.selenium.dev/documentation/test_practices/design_strategies/" target="_blank" rel="noreferrer"><em>Official Documentation</em></a></p></div><ul><li><p><a href="https://www.selenium.dev/documentation/test_practices/encouraged/domain_specific_language/" target="_blank" rel="noreferrer">DomainDrivenDesign</a>: Express your tests in the language of the end-user of the app.</p></li><li><p><a href="https://www.selenium.dev/documentation/test_practices/design_strategies/#:~:text=of%20the%20app.-,PageObjects,-%3A%20A%20simple%20abstraction" target="_blank" rel="noreferrer">PageObjects</a>: A simple abstraction of the UI of your web app.</p></li><li><p>LoadableComponent: Modeling PageObjects as components.</p></li><li><p>BotStyleTests: Using a command-based approach to automating tests, rather than the object-based approach that PageObjects encourage</p></li></ul><p>In short, make your page class extends <code>LoadableComponent</code>, by extending this base class, needs to implement the <code>load()</code> and the <code>isLoaded()</code> methods. The <code>load()</code> method should load the page, and the <code>isLoaded()</code> method should check if the page is loaded.</p><p>Bot Pattern: Although PageObjects are a useful way of reducing duplication in your tests, it‚Äôs not always a pattern that teams feel comfortable following. An alternative approach is to follow a more ‚Äúcommand-like‚Äù style of testing.</p><p>A ‚Äúbot‚Äù is an action-oriented abstraction over the raw Selenium APIs. This means that if you find that commands aren‚Äôt doing the Right Thing for your app, it‚Äôs easy to change them. As an example:</p><details class="details custom-block"><summary>Click to view example</summary><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ActionBot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebDriver driver;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ActionBot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebDriver </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">driver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.driver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> driver;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(By </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">locator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    driver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(locator).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(By </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">locator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    driver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(locator).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * Type something into an input field. WebDriver doesn&#39;t normally clear these</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * before typing, so this method does that first. It also sends a return key</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * to move the focus out of the element.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(By </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">locator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    WebElement element </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> driver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(locator);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><h2 id="to-automate-or-not-to-automate" tabindex="-1">To automate or not to automate? <a class="header-anchor" href="#to-automate-or-not-to-automate" aria-label="Permalink to &quot;To automate or not to automate?&quot;">‚Äã</a></h2><p>Is automation always advantageous? When should one decide to automate test cases?</p><p>It is not always advantageous to automate test cases. There are times when manual testing may be more appropriate. For instance, if the application‚Äôs user interface will change considerably in the near future, then any automation might need to be rewritten anyway. Also, sometimes there simply is not enough time to build test automation. For the short term, manual testing may be more effective. If an application has a very tight deadline, there is currently no test automation available, and it‚Äôs imperative that the testing gets done within that time frame, then manual testing is the best solution.</p><h2 id="page-object-models" tabindex="-1">Page object models <a class="header-anchor" href="#page-object-models" aria-label="Permalink to &quot;Page object models&quot;">‚Äã</a></h2><h3 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">‚Äã</a></h3><p>Within your web app‚Äôs UI, there are areas where your tests interact with. A Page Object only models these as objects within the test code. This reduces the amount of duplicated code and means that if the UI changes, the fix needs only to be applied in one place.</p><p>Page Object is a Design Pattern that has become popular in test automation for enhancing test maintenance and reducing code duplication. A page object is an object-oriented class that serves as an interface to a page of your AUT. The tests then use the methods of this page object class whenever they need to interact with the UI of that page. The benefit is that if the UI changes for the page, the tests themselves don‚Äôt need to change, only the code within the page object needs to change. Subsequently, all changes to support that new UI are located in one place.</p><h3 id="advantages" tabindex="-1">Advantages <a class="header-anchor" href="#advantages" aria-label="Permalink to &quot;Advantages&quot;">‚Äã</a></h3><ul><li>There is a clean separation between the test code and page-specific code, such as locators (or their use if you‚Äôre using a UI Map) and layout.</li><li>There is a single repository for the services or operations the page offers rather than having these services scattered throughout the tests.</li></ul><p>There is a lot of flexibility in how the page objects may be designed, but there are a few basic rules for getting the desired maintainability of your test code.</p><h3 id="assertions-in-page-objects" tabindex="-1">Assertions in Page Objects <a class="header-anchor" href="#assertions-in-page-objects" aria-label="Permalink to &quot;Assertions in Page Objects&quot;">‚Äã</a></h3><p>Page objects themselves should never make verifications or assertions. This is part of your test and should always be within the test‚Äôs code, never in an page object. The page object will contain the representation of the page, and the services the page provides via methods but no code related to what is being tested should be within the page object.</p><p>There is one, single, verification which can, and should, be within the page object and that is to verify that the page, and possibly critical elements on the page, were loaded correctly. This verification should be done while instantiating the page object.</p><h3 id="page-component-objects" tabindex="-1">Page Component Objects <a class="header-anchor" href="#page-component-objects" aria-label="Permalink to &quot;Page Component Objects&quot;">‚Äã</a></h3><p>A page object does not necessarily need to represent all the parts of a page itself. This was <a href="https://martinfowler.com/bliki/PageObject.html#footnote-panel-object" target="_blank" rel="noreferrer">noted by Martin Fowler</a> in the early days, while first coining the term ‚Äúpanel objects‚Äù.</p><p>The same principles used for page objects can be used to create ‚ÄúPage Component Objects‚Äù, as it was later called, that represent discrete chunks of the page and <strong>can be included in page objects</strong>. These component objects can provide references to the elements inside those discrete chunks, and methods to leverage the functionality or behavior provided by them.</p><p>The page and component are represented by their own objects. Both objects only have methods for the <strong>services</strong> they offer, which matches the real-world application in object-oriented programming.</p><p>You can even nest component objects inside other component objects for more complex pages. If a page in the AUT (Application under test) has multiple components, or common components used throughout the site (e.g. a navigation bar), then it may improve maintainability and reduce code duplication.</p><h3 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">‚Äã</a></h3><ul><li>The public methods represent the services that the page offers</li><li>Try not to expose the internals of the page</li><li>Generally don‚Äôt make assertions</li><li>Methods return other PageObjects</li><li>Need not represent an entire page</li><li>Different results for the same action are modelled as different methods</li></ul><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">‚Äã</a></h3><p>Here is an example of a page object for a login page:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoginPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebDriver driver;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoginPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebDriver </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">driver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.driver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> driver;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Check that we&#39;re on the right page.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(driver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Alternatively, we could navigate to the login page, perhaps logging out first</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IllegalStateException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is not the login page&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The login page contains several HTML elements that will be represented as WebElements.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The locators for these elements should only be defined once.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    By usernameLocator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> By.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    By passwordLocator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> By.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;passwd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    By loginButtonLocator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> By.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The login page allows the user to type their username into the username field</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LoginPage </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typeUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // This is the only place that &quot;knows&quot; how to enter a username</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        driver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(usernameLocator).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Return the current page object as this action doesn&#39;t navigate to a page represented by another PageObject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The login page allows the user to type their password into the password field</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LoginPage </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typePassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // This is the only place that &quot;knows&quot; how to enter a password</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        driver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passwordLocator).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Return the current page object as this action doesn&#39;t navigate to a page represented by another PageObject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The login page allows the user to submit the login form</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HomePage </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submitLogin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // This is the only place that submits the login form and expects the destination to be the home page.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // A seperate method should be created for the instance of clicking login whilst expecting a login failure.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        driver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loginButtonLocator).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Return a new page object representing the destination. Should the login page ever</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // go somewhere else (for example, a legal disclaimer) then changing the method signature</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // for this method will mean that all tests that rely on this behaviour won&#39;t compile.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HomePage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(driver);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The login page allows the user to submit the login form knowing that an invalid username and / or password were entered</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LoginPage </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submitLoginExpectingFailure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // This is the only place that submits the login form and expects the destination to be the login page due to login failure.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        driver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loginButtonLocator).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Return a new page object representing the destination. Should the user ever be navigated to the home page after submiting a login with credentials</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // expected to fail login, the script will fail when it attempts to instantiate the LoginPage PageObject.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoginPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(driver);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Conceptually, the login page offers the user the service of being able to &quot;log into&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // the application using a user name and password.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HomePage </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loginAs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // The PageObject methods that enter username, password &amp; submit login have already defined and should not be repeated here.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        typeUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        typePassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> submitLogin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="avoid-sharing-state" tabindex="-1">Avoid Sharing State <a class="header-anchor" href="#avoid-sharing-state" aria-label="Permalink to &quot;Avoid Sharing State&quot;">‚Äã</a></h2><p>Although mentioned in several places, it is worth mentioning again. We must ensure that the tests are isolated from one another.</p><ul><li>Do not share test data. Imagine several tests that each query the database for valid orders before picking one to perform an action on. Should two tests pick up the same order you are likely to get unexpected behavior.</li><li>Clean up stale data in the application that might be picked up by another test e.g. invalid order records.</li><li>Create a new WebDriver instance per test. This helps ensure test isolation and makes parallelization simpler.</li></ul><h2 id="locators" tabindex="-1">Locators <a class="header-anchor" href="#locators" aria-label="Permalink to &quot;Locators&quot;">‚Äã</a></h2><p>In general, if HTML IDs are available, unique, and consistently predictable, they are the preferred method for locating an element on a page. They tend to work very quickly, and forego much processing that comes with complicated DOM traversals.</p><p>If unique IDs are unavailable, a well-written CSS selector is the preferred method of locating an element. XPath works as well as CSS selectors, but the syntax is complicated and frequently difficult to debug. Though XPath selectors are very flexible, they are typically not performance tested by browser vendors and tend to be quite slow.</p><p>Selection strategies based on linkText and partialLinkText have drawbacks in that they only work on link elements. Additionally, they call down to <a href="https://www.w3.org/TR/webdriver/#link-text" target="_blank" rel="noreferrer">querySelectorAll</a> selectors internally in WebDriver.</p><p>Tag name can be a dangerous way to locate elements. There are frequently multiple elements of the same tag present on the page. This is mostly useful when calling the <em>findElements(By)</em> method which returns a collection of elements.</p><p>The recommendation is to keep your locators as compact and readable as possible. Asking WebDriver to traverse the DOM structure is an expensive operation, and the more you can narrow the scope of your search, the better.</p><h2 id="consider-using-a-fluent-api" tabindex="-1">Consider using a fluent API <a class="header-anchor" href="#consider-using-a-fluent-api" aria-label="Permalink to &quot;Consider using a fluent API&quot;">‚Äã</a></h2><p>Martin Fowler coined the term <a href="https://www.martinfowler.com/bliki/FluentInterface.html" target="_blank" rel="noreferrer">‚ÄúFluent API‚Äù</a>. Selenium already implements something like this in their <code>FluentWait</code> class, which is meant as an alternative to the standard <code>Wait</code> class.</p><details class="details custom-block"><summary>Click to view example</summary><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BasePage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    protected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebDriver driver;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BasePage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebDriver </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">driver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.driver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> driver;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GoogleSearchPage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BasePage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GoogleSearchPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebDriver </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">driver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(driver);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Generally do not assert within pages or components.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Effectively throws an exception if the lambda condition is not met.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebDriverWait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(driver, Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ofSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">until</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(By.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;logo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GoogleSearchPage </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSearchString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sstr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        driver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(By.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gbqfq&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sstr);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> clickSearchButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        driver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(By.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gbqfb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details>`,42);function g(c,E,y,u,m,F){const s=t("Badge");return p(),l("div",null,[e("h1",k,[i("Test Practices "),a(s,{type:"tip",text:"Selenium"}),a(s,{type:"warning",text:"Notes"}),i(),o]),d])}const A=n(r,[["render",g]]);export{f as __pageData,A as default};
